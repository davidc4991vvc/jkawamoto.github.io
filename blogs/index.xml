<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Junpei Kawamoto</title>
    <link>https://www.jkawamoto.info/blogs/</link>
    <description>Recent content in Blogs on Junpei Kawamoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016 Junpei Kawamoto</copyright>
    <lastBuildDate>Wed, 19 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jkawamoto.info/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Include GitHub repositories to requirements.txt</title>
      <link>https://www.jkawamoto.info/blogs/include-github-repositories-to-requirements-txt/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/include-github-repositories-to-requirements-txt/</guid>
      <description>

&lt;h2 id=&#34;summary:a0ee9d0ea8575a88500eea9bd15cac6b&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This document explains how to include packages hosted in GitHub
but not not registered in &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPI&lt;/a&gt; into &lt;code&gt;requirements.txt&lt;/code&gt;,
and how to configure &lt;code&gt;setup.py&lt;/code&gt; referring &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;requirements-txt:a0ee9d0ea8575a88500eea9bd15cac6b&#34;&gt;requirements.txt&lt;/h2&gt;

&lt;p&gt;Supposing &lt;a href=&#34;https://github.com/rgmining/common&#34;&gt;https://github.com/rgmining/common&lt;/a&gt; as the GitHub repository to be added to &lt;code&gt;requirements.txt&lt;/code&gt;,
the package information for the repository is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e git+https://github.com/rgmining/common.git#egg=rgmining_common-0.9.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format after &lt;code&gt;#egg=&lt;/code&gt; shoule be &lt;code&gt;&amp;lt;package name&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;.
If you&amp;rsquo;re using &lt;code&gt;pip-tools&lt;/code&gt; to compile &lt;code&gt;requirements.txt&lt;/code&gt;,
your &lt;code&gt;requirements.in&lt;/code&gt; should have the same clause.&lt;/p&gt;

&lt;h2 id=&#34;setup-py:a0ee9d0ea8575a88500eea9bd15cac6b&#34;&gt;setup.py&lt;/h2&gt;

&lt;p&gt;To include &lt;code&gt;requirements.txt&lt;/code&gt; in &lt;code&gt;setup.py&lt;/code&gt;,
give the following &lt;code&gt;load_requires_from_file&lt;/code&gt; function to &lt;code&gt;install_requires&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from setuptools import setup, find_packages

def load_requires_from_file(filepath):
    with open(filepath) as fp:
        return [pkg_name.strip() for pkg_name in fp.readlines()]

setup(
    # Other clauses are omitted.
    install_requires=load_requires_from_file(&amp;quot;requirements.txt&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your &lt;code&gt;requirements.txt&lt;/code&gt; has URLs,
&lt;code&gt;load_requires_from_file&lt;/code&gt; function should be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def take_package_name(name):
    if name.startswith(&amp;quot;-e&amp;quot;):
        return name[name.find(&amp;quot;=&amp;quot;)+1:name.rfind(&amp;quot;-&amp;quot;)]
    else:
        return name.strip()

def load_requires_from_file(filepath):
    with open(filepath) as fp:
        return [take_package_name(pkg_name) for pkg_name in fp.readlines()]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and give those URLs via &lt;code&gt;dependency_link&lt;/code&gt; attribute in &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def load_links_from_file(filepath):
    res = []
    with open(filepath) as fp:
        for pkg_name in fp.readlines():
            if pkg_name.startswith(&amp;quot;-e&amp;quot;):
                res.append(pkg_name.split(&amp;quot; &amp;quot;)[1])
    return res

setup(
    # Other clauses are omitted.
    install_requires=load_requires_from_file(&amp;quot;requirements.txt&amp;quot;),
    dependency_links=load_links_from_file(&amp;quot;requirements.txt&amp;quot;),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, &lt;code&gt;python setup.py test&lt;/code&gt; downloads packages from GitHub and runs tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compiling a Sphinx document on Wercker</title>
      <link>https://www.jkawamoto.info/blogs/sphinx-on-wercker/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/sphinx-on-wercker/</guid>
      <description>

&lt;p&gt;After import your repository, application page looks like this. Move on the workflow tab.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-1.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-1.png&#34; alt=&#34;Fig. 1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open configuration of the &lt;code&gt;build&lt;/code&gt; pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-2.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-2.png&#34; alt=&#34;Fig. 2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the configuration of the build pipeline, scroll down to Permission level.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-3.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-3.png&#34; alt=&#34;Fig. 3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And choose &lt;code&gt;execute pipeline&lt;/code&gt; in order to prevent someone starting pipeline and see detailed logs.
Also set &lt;code&gt;gh-pages&lt;/code&gt; to Ignore branches so that Wercker will not start building documents after pushing to &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-4.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-4.png&#34; alt=&#34;Fig. 4&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, back to the workflow tab and add a new pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-5.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-5.png&#34; alt=&#34;Fig. 5&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we name the new pipeline &lt;code&gt;deploy&lt;/code&gt;, and hook type should be default to be chained to the build pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-6.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-6.png&#34; alt=&#34;Fig. 6&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to push built documents to GitHub, this pipeline should know an access token of GitHub.
Add such key with name &lt;code&gt;GIT_TOKEN&lt;/code&gt; and protected option in the environment variables section of &lt;code&gt;deploy&lt;/code&gt; pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-7.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-7.png&#34; alt=&#34;Fig. 7&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The token can be obtained in &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt;.
If your repository is public, you only need a token with &lt;code&gt;public_repo&lt;/code&gt; scope. Otherwise, you may need a token with &lt;code&gt;repo&lt;/code&gt; scope.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-8.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-8.png&#34; alt=&#34;Fig. 8&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding &lt;code&gt;GIT_TOKEN&lt;/code&gt;, check Permission level is Execute pipelines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-9.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-9.png&#34; alt=&#34;Fig. 9&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, make a workflow connecting the &lt;code&gt;deploy&lt;/code&gt; pipeline to the &lt;code&gt;build&lt;/code&gt; one in Workflow tab. Make sure this workflow only runs on master branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-10.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-10.png&#34; alt=&#34;Fig. 10&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end, the workflow looks like the followings.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-11.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-11.png&#34; alt=&#34;Fig. 11&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you need to add &lt;code&gt;wercker.yml&lt;/code&gt; in your branch root.
You use Sphinx to build documents of which sources are in &lt;code&gt;docs&lt;/code&gt;. &lt;code&gt;wercker.yml&lt;/code&gt; may be there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;box: jkawamoto/ghp-box
build:
  steps:
    - jkawamoto/sphinx:
        basedir: docs
        packages: sphinx_rtd_theme
deploy:
  steps:
    - jkawamoto/ghp-import:
        token: $GIT_TOKEN
        basedir: docs/build/html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also specifies to install &lt;code&gt;sphinx_rtd_theme&lt;/code&gt;. Make sure after running &lt;code&gt;make html&lt;/code&gt; in &lt;code&gt;doc&lt;/code&gt; folder, your documents are in &lt;code&gt;docs/build/html&lt;/code&gt;. Otherwise, edit &lt;code&gt;basedir&lt;/code&gt; in the last line.&lt;/p&gt;

&lt;h2 id=&#34;references:621771da372dad7b0cf1aa19329621c9&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkawamoto/dockerfiles/tree/master/wercker-ghp-box&#34;&gt;jkawamoto/ghp-box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkawamoto/wercker-sphinx-step&#34;&gt;jkawamoto/sphinx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkawamoto/wercker-ghp-import-step&#34;&gt;jkawamoto/ghp-import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Internationalization (i18n) of Meteor applications</title>
      <link>https://www.jkawamoto.info/blogs/i18n-package-in-meteor/</link>
      <pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/i18n-package-in-meteor/</guid>
      <description>

&lt;h2 id=&#34;universe-i18n:b29d758a8384a43dccfcfc35d604f1ac&#34;&gt;universe:i18n&lt;/h2&gt;

&lt;p&gt;How to internationalize &lt;a href=&#34;https://www.meteor.com/&#34;&gt;Meteor&lt;/a&gt; application?
An &lt;a href=&#34;https://atmospherejs.com&#34;&gt;atmosphere&lt;/a&gt; package &lt;a href=&#34;https://atmospherejs.com/universe/i18n&#34;&gt;universe:i18n&lt;/a&gt; helps it.
It supports locales in &lt;a href=&#34;https://github.com/vazco/meteor-universe-i18n/blob/master/lib/locales.js&#34;&gt;the list&lt;/a&gt;,
and JSON and YAML formats for bilingual corpuses.&lt;/p&gt;

&lt;p&gt;To install &lt;a href=&#34;https://atmospherejs.com/universe/i18n&#34;&gt;universe:i18n&lt;/a&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ meteor add universe:i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the following in script files to import it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import i18n from &amp;quot;meteor/universe:i18n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;register-corpuses:b29d758a8384a43dccfcfc35d604f1ac&#34;&gt;Register corpuses&lt;/h3&gt;

&lt;p&gt;You can add corpuses with APIs in &lt;a href=&#34;https://atmospherejs.com/universe/i18n&#34;&gt;universe:i18n&lt;/a&gt;.
The following line adds a word associated with a namespace and a keyword to a locale.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;i18n.addTranslation(“locale&amp;quot;, “namespace&amp;quot;, “keyword&amp;quot;, “word&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;corpus-file:b29d758a8384a43dccfcfc35d604f1ac&#34;&gt;Corpus file&lt;/h3&gt;

&lt;p&gt;It is hard to add corpuses by &lt;code&gt;i18n.addTranslation&lt;/code&gt; function.
You can add corpuses with JSON and YAML files,
and such file names must end with &lt;code&gt;.i18n.json&lt;/code&gt; and &lt;code&gt;.i18n.yml&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;For example, a YAML corpus file consists of key-value pairs such as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;ok: 決定
cancel: キャンセル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify namespace of a corpus file with adding &lt;code&gt;_namespace&lt;/code&gt; key.
The following example is a set of corpuses for namespace &lt;code&gt;ui&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;_namespace: ui
ok: 決定
cancel: キャンセル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which locale a corpus file belongs to is specified by &lt;code&gt;_locale&lt;/code&gt; key or file name.
The following file belongs to locale &lt;code&gt;ja&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;_locale: ja
ok: 決定
cancel: キャンセル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to open each corpus files to check locale if using &lt;code&gt;_locale&lt;/code&gt; key.
I think it is better to use file name to specify locale.
For example, a corpus file which belongs to &lt;code&gt;en-US&lt;/code&gt; locale should be following
one of the two formats.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;en-us.i18n.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;en-us/someName.i18n.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that corpus files must not be in &lt;code&gt;imports&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;get-a-translated-word:b29d758a8384a43dccfcfc35d604f1ac&#34;&gt;Get a translated word&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18n.__(namespace, key)&lt;/code&gt; function returns a translated word associated with &lt;code&gt;namespace&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;i18n.__(&amp;quot;ui&amp;quot;, &amp;quot;ok&amp;quot;); // -&amp;gt; 決定 (in locale ja)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;change-locale:b29d758a8384a43dccfcfc35d604f1ac&#34;&gt;Change locale&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;i18n.setLocale(&amp;quot;locale&amp;quot;)&lt;/code&gt; function sets a new locale &lt;code&gt;locale&lt;/code&gt;,
and downloads the corpus associated with the locale asynchronously.
The function returns a &lt;code&gt;Promise&lt;/code&gt; and &lt;code&gt;.then&lt;/code&gt; method is available to run some commands after receiving the corpus.&lt;/p&gt;

&lt;h3 id=&#34;use-universe-i18n-in-angular-meteor:b29d758a8384a43dccfcfc35d604f1ac&#34;&gt;Use universe:i18n in Angular-Meteor&lt;/h3&gt;

&lt;p&gt;To use universe:i18n in &lt;a href=&#34;http://www.angular-meteor.com/&#34;&gt;Angular-Meteor&lt;/a&gt; template,
add &lt;code&gt;i18n.getTranslation&lt;/code&gt; method in a scope.
Foe example, the following controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class AppCtrl {

  constructor() {
    this.translator = i18n.getTranslation;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;provides &lt;code&gt;translator&lt;/code&gt; method and a template&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;md-button ng-click=&amp;quot;$ctrl.onNext()&amp;quot; aria-label=&amp;quot;$ctrl.translator(&#39;ui&#39;, &#39;ok&#39;)&amp;quot;&amp;gt;
  {{$ctrl.translator(&amp;quot;button&amp;quot;, &amp;quot;start&amp;quot;)}}
&amp;lt;/md-button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;inserts a word associated with &lt;code&gt;button&lt;/code&gt; namespace and &lt;code&gt;start&lt;/code&gt; key.
To update such words when locale is changed, use the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const setLocalePromise = i18n.setLocale(locale) || i18n.setLocale(&amp;quot;en&amp;quot;);
setLocalePromise.then((e) =&amp;gt; {
   this.translator = i18n.getTranslation;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you call &lt;code&gt;setLocale&lt;/code&gt; function without an UI event, for example in a constructor, DOM won&amp;rsquo;t be updated.
You need to use &lt;code&gt;$scope.$apply()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;constructor($scope) {

  const setLocalePromise = i18n.setLocale(getLang()) || i18n.setLocale(&amp;quot;en&amp;quot;);
  setLocalePromise.then(() =&amp;gt; {
    $scope.$apply( () =&amp;gt;{
      this.translator = i18n.getTranslation;
    });
  });

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;http://jimhoskins.com/2012/12/17/angularjs-and-apply.html&#34;&gt;AngularJS and scope.$apply&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use fullPage.js in AngularJS</title>
      <link>https://www.jkawamoto.info/blogs/fullpagejs-in-angularjs/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/fullpagejs-in-angularjs/</guid>
      <description>

&lt;h2 id=&#34;summary:69b24904d2568082afd340a9b334aca2&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hellsan631/angular-fullpage.js&#34;&gt;angular-fullpage.js&lt;/a&gt; is a library
to use &lt;a href=&#34;http://alvarotrigo.com/fullPage/&#34;&gt;fullPage.js&lt;/a&gt; in &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;,
but the &lt;a href=&#34;https://www.npmjs.com/package/angular-fullpage.js&#34;&gt;npm&lt;/a&gt; version has a problem in event handling,
and you need to use GitHub version.&lt;/p&gt;

&lt;p&gt;Although fullPage.js also assumes every section is a child of a same parent node, it is difficult in AngularJS.
I &lt;a href=&#34;https://github.com/jkawamoto/fullPage.js&#34;&gt;modified fullPage.js&lt;/a&gt; to solve this problem.&lt;/p&gt;

&lt;p&gt;This entry explains how to use my fullPage.js in AngularJS.&lt;/p&gt;

&lt;h2 id=&#34;angular-fullpage-js:69b24904d2568082afd340a9b334aca2&#34;&gt;angular-fullpage.js&lt;/h2&gt;

&lt;p&gt;The current version of angular-fullpage.js in npm has a problem in event handling,
and you need to use the newest source code from GitHub.
&lt;code&gt;dependencies&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; allows GitHub repositores, i.e.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;angular-fullpage.js&amp;quot;: &amp;quot;hellsan631/angular-fullpage.js&amp;quot;,
    ...
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;npm install&lt;/code&gt; downloads the newest source code from GitHub.&lt;/p&gt;

&lt;p&gt;To activate fullPage.js, you need to add &lt;code&gt;full-page&lt;/code&gt; attribute to the parent node&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 2&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 3&amp;lt;/div&amp;gt;
  …
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and give options through &lt;code&gt;options&lt;/code&gt; attribute.
For example, make a controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class FullpageCtrl {

  constructor() {

    this.options = {
      sectionsColor: [&#39;#1bbc9b&#39;, &#39;#4BBFC3&#39;, &#39;#7BAABE&#39;],
      scrollingSpeed: 1000,
      onLeave: (index, nextIndex, direction) =&amp;gt; {
        // do something
      }
    };

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and use it from a template&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page options=&amp;quot;$ctrl.options&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 2&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 3&amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apply-fullpage-js-for-not-sibling-nodes:69b24904d2568082afd340a9b334aca2&#34;&gt;Apply fullPage.js for not sibling nodes&lt;/h2&gt;

&lt;p&gt;fullpage.js assumes every section is a child of a same parent node, for example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 2&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 3&amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This constraint might be a problem when you combine components providing sections.
Suppose two components &lt;code&gt;component1&lt;/code&gt; and &lt;code&gt;component2&lt;/code&gt;, and those templates are&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;section&amp;quot; ng-repeat=&amp;quot;item in $ctrl.items&amp;quot;&amp;gt;
  &amp;lt;!-- some contents --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;section&amp;quot; ng-repeat=&amp;quot;item in $ctrl.items&amp;quot;&amp;gt;
  &amp;lt;!-- some contents --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, a parent node of fullpage.js is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;component1&amp;gt;&amp;lt;/component1&amp;gt;
  &amp;lt;component2&amp;gt;&amp;lt;/component2&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This template is extended to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;component1&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
     &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
     &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    ...
  &amp;lt;/component1&amp;gt;
  &amp;lt;component2&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
      &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
      &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    ...
  &amp;lt;/component2&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and those sections are not children of a same parent node,
which means fullPage.js doesn&amp;rsquo;t work in such case.&lt;/p&gt;

&lt;p&gt;I fixed this problem and my source code is available in &lt;a href=&#34;https://github.com/jkawamoto/fullPage.js&#34;&gt;GitHub&lt;/a&gt;.
To use my version, your &lt;code&gt;package.json&lt;/code&gt; should have a link to my repository like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;fullpage.js&amp;quot;: &amp;quot;jkawamoto/fullPage.js#deeper-section-spike&amp;quot;,
    ...
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version searches all nodes to find sections and it might be slower than original version.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Chart.js in AngularJS</title>
      <link>https://www.jkawamoto.info/blogs/chartjs-in-angularjs/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/chartjs-in-angularjs/</guid>
      <description>

&lt;h2 id=&#34;angular-chart:7c8787ac68b82ab2b2fa23384bd6e453&#34;&gt;Angular Chart&lt;/h2&gt;

&lt;p&gt;This entry explains how to use &lt;a href=&#34;http://www.chartjs.org/&#34;&gt;Chart.js&lt;/a&gt; in &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;.
The answer is simple and use &lt;a href=&#34;http://jtblin.github.io/angular-chart.js/&#34;&gt;Angular Chart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To add a chart in your application, you need to add a &lt;code&gt;canvas&lt;/code&gt; element with &lt;code&gt;chart&lt;/code&gt; class and a class depended on chart type you want to add.
Suppose we are adding a bar chart in an application, for example, we need to add a &lt;code&gt;canvas&lt;/code&gt; element with &lt;code&gt;class=&amp;quot;chart chart-bar&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Angular Chart, data to be plotted are given through &lt;code&gt;chart-data&lt;/code&gt;, &lt;code&gt;chart-labels&lt;/code&gt;, &lt;code&gt;chart-series&lt;/code&gt;, and &lt;code&gt;chart-dataset-override&lt;/code&gt; elements.
This design is little bit different from one of original &lt;a href=&#34;http://www.chartjs.org/&#34;&gt;Chart.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chart-data&lt;/code&gt; attribute is associated with &lt;code&gt;data.datasets&lt;/code&gt; in &lt;code&gt;Chart.js&lt;/code&gt;, but it only takes a list or 2-dimensions list,
although &lt;code&gt;data.datasets&lt;/code&gt; takes a more complex object, including labels, color information, etc.
Here is an example object in &lt;code&gt;Chart.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;datasets: [{
  label: &#39;# of Votes&#39;,
  data: [12, 19, 3, 5, 2, 3],
  backgroundColor: [
    &#39;rgba(255, 99, 132, 0.2)&#39;,
    &#39;rgba(54, 162, 235, 0.2)&#39;,
    &#39;rgba(255, 206, 86, 0.2)&#39;,
    &#39;rgba(75, 192, 192, 0.2)&#39;,
    &#39;rgba(153, 102, 255, 0.2)&#39;,
    &#39;rgba(255, 159, 64, 0.2)&#39;
  ],
  borderColor: [
    &#39;rgba(255,99,132,1)&#39;,
    &#39;rgba(54, 162, 235, 1)&#39;,
    &#39;rgba(255, 206, 86, 1)&#39;,
    &#39;rgba(75, 192, 192, 1)&#39;,
    &#39;rgba(153, 102, 255, 1)&#39;,
    &#39;rgba(255, 159, 64, 1)&#39;
  ],
  borderWidth: 1
},
...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Angular Chart, the data given to &lt;code&gt;chart-data&lt;/code&gt; attribute must consist of only data attribute in the above object,
i.e. the constructor of our controller is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class GraphCtrl{
  constructor() {
    this.data = [
      [12, 19, 3, 5, 2, 3],
      ...
    ];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and our template is &lt;code&gt;&amp;lt;canvas class=&amp;quot;chart chart-bar&amp;quot; chart-data=&amp;quot;$ctrl.data&amp;quot; /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Label information is given through &lt;code&gt;chart-series&lt;/code&gt; attribute,
and the attribute takes a list consists of label names.&lt;/p&gt;

&lt;p&gt;The other information such as &lt;code&gt;backgroundColor&lt;/code&gt;, &lt;code&gt;borderColor&lt;/code&gt;, &lt;code&gt;borderWidth&lt;/code&gt;, etc. is given through &lt;code&gt;chart-dataset-override&lt;/code&gt; attribute.
This attribute takes as same object as one in &lt;code&gt;Chart.js&lt;/code&gt; without &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;Note that, &lt;code&gt;chart-data&lt;/code&gt; attribute is required and you shouldn&amp;rsquo;t give data through &lt;code&gt;chart-dataset-override&lt;/code&gt; attaribute.&lt;/p&gt;

&lt;h3 id=&#34;example:7c8787ac68b82ab2b2fa23384bd6e453&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;In this example, we&amp;rsquo;ll convert &lt;a href=&#34;(http://www.chartjs.org/docs/#getting-started-creating-a-chart&#34;&gt;a bar chart example&lt;/a&gt;) given
in Chart.js&amp;rsquo;s document for Angular Chart.&lt;/p&gt;

&lt;h4 id=&#34;chart-js-version:7c8787ac68b82ab2b2fa23384bd6e453&#34;&gt;Chart.js version&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var myChart = new Chart(ctx, {
  type: &#39;bar&#39;,
  data: {
    labels: [&amp;quot;Red&amp;quot;, &amp;quot;Blue&amp;quot;, &amp;quot;Yellow&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Purple&amp;quot;, &amp;quot;Orange&amp;quot;],
    datasets: [{
      label: &#39;# of Votes&#39;,
      data: [12, 19, 3, 5, 2, 3],
      backgroundColor: [
        &#39;rgba(255, 99, 132, 0.2)&#39;,
        &#39;rgba(54, 162, 235, 0.2)&#39;,
        &#39;rgba(255, 206, 86, 0.2)&#39;,
        &#39;rgba(75, 192, 192, 0.2)&#39;,
        &#39;rgba(153, 102, 255, 0.2)&#39;,
        &#39;rgba(255, 159, 64, 0.2)&#39;
      ],
      borderColor: [
        &#39;rgba(255,99,132,1)&#39;,
        &#39;rgba(54, 162, 235, 1)&#39;,
        &#39;rgba(255, 206, 86, 1)&#39;,
        &#39;rgba(75, 192, 192, 1)&#39;,
        &#39;rgba(153, 102, 255, 1)&#39;,
        &#39;rgba(255, 159, 64, 1)&#39;
      ],
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      yAxes: [{
        ticks: {
          beginAtZero: true
        }
      }]
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;angular-chart-version:7c8787ac68b82ab2b2fa23384bd6e453&#34;&gt;Angular Chart version&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;chart.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class ChartCtrl{

  constructor(){

    this.labels = [&amp;quot;Red&amp;quot;, &amp;quot;Blue&amp;quot;, &amp;quot;Yellow&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Purple&amp;quot;, &amp;quot;Orange&amp;quot;];
    this.data = [
      [12, 19, 3, 5, 2, 3]
    ];
    this.seriese = [&amp;quot;# of Votes&amp;quot;];
    this.datasets = [
      {
        backgroundColor: [
          &#39;rgba(255, 99, 132, 0.2)&#39;,
          &#39;rgba(54, 162, 235, 0.2)&#39;,
          &#39;rgba(255, 206, 86, 0.2)&#39;,
          &#39;rgba(75, 192, 192, 0.2)&#39;,
          &#39;rgba(153, 102, 255, 0.2)&#39;,
          &#39;rgba(255, 159, 64, 0.2)&#39;
        ],
        borderColor: [
          &#39;rgba(255,99,132,1)&#39;,
          &#39;rgba(54, 162, 235, 1)&#39;,
          &#39;rgba(255, 206, 86, 1)&#39;,
          &#39;rgba(75, 192, 192, 1)&#39;,
          &#39;rgba(153, 102, 255, 1)&#39;,
          &#39;rgba(255, 159, 64, 1)&#39;
        ],
        borderWidth: 1
      }
    ];
    this.options = {
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero: true
          }
        }]
      }
    };

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;chart.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;canvas class=&amp;quot;chart chart-bar&amp;quot;
  chart-data=&amp;quot;$ctrl.data&amp;quot;
  chart-labels=&amp;quot;$ctrl.labels&amp;quot;
  chart-series=&amp;quot;$ctrl.seriese&amp;quot;
  chart-dataset-override=&amp;quot;$ctrl.datasets&amp;quot;
  chart-options=&amp;quot;$ctrl.options&amp;quot;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;datasets&lt;/code&gt; has only one sequence as the above example, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;datasets&lt;/code&gt; shouldn&amp;rsquo;t be lists.
But, in this case, &lt;code&gt;chart-series&lt;/code&gt; attribute will be ignored,
and don&amp;rsquo;t forget to add &lt;code&gt;label: &amp;quot;# of Votes&amp;quot;&lt;/code&gt; attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;this.data = [12, 19, 3, 5, 2, 3];
this.datasets = {
  label: &amp;quot;# of Votes&amp;quot;,
  backgroundColor: [
    &#39;rgba(255, 99, 132, 0.2)&#39;,
    &#39;rgba(54, 162, 235, 0.2)&#39;,
    &#39;rgba(255, 206, 86, 0.2)&#39;,
    &#39;rgba(75, 192, 192, 0.2)&#39;,
    &#39;rgba(153, 102, 255, 0.2)&#39;,
    &#39;rgba(255, 159, 64, 0.2)&#39;
  ],
  borderColor: [
    &#39;rgba(255,99,132,1)&#39;,
    &#39;rgba(54, 162, 235, 1)&#39;,
    &#39;rgba(255, 206, 86, 1)&#39;,
    &#39;rgba(75, 192, 192, 1)&#39;,
    &#39;rgba(153, 102, 255, 1)&#39;,
    &#39;rgba(255, 159, 64, 1)&#39;
  ],
  borderWidth: 1
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>