<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parcelify on Junpei Kawamoto</title>
    <link>https://www.jkawamoto.info/tags/parcelify/index.xml</link>
    <description>Recent content in Parcelify on Junpei Kawamoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016 Junpei Kawamoto</copyright>
    <atom:link href="https://www.jkawamoto.info/tags/parcelify/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Import CSS files from npm libraries</title>
      <link>https://www.jkawamoto.info/blogs/import-css-from-npm/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/import-css-from-npm/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Client-side package management tool has been replacing to &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; from &lt;a href=&#34;http://bower.io/&#34;&gt;bower&lt;/a&gt;,
and client-side JavaScript packages are imported with &lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt;.
However, it is difficult to import CSS files.
Supposing importing bootstrap&amp;rsquo;s css installed with npm, which is installed by &lt;code&gt;npm i --save bootstrap&lt;/code&gt;, to &lt;code&gt;bundle.css&lt;/code&gt;,
this entry explains two importing ways;
&lt;a href=&#34;https://github.com/rotundasoftware/parcelify&#34;&gt;Parcelify&lt;/a&gt; and &lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;rework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We assume to use &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt; as the task runner,
and we investigate ways that don&amp;rsquo;t fix directory structure.&lt;/p&gt;

&lt;h2 id=&#34;parcelify&#34;&gt;Parcelify&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rotundasoftware/parcelify&#34;&gt;Parcelify&lt;/a&gt; is a famous plugin of Browserify,
which means if your project doesn&amp;rsquo;t use JavaScript, you need to add a dummy script file to use Parcelify.
To use Parcelify, you need to list up css files at &lt;code&gt;style&lt;/code&gt; attribute in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, the following &lt;code&gt;package.json&lt;/code&gt; imports css files provided from Bootstrap.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;style&amp;quot;: [
    &amp;quot;./node_modules/bootstrap/dist/css/bootstrap.min.css&amp;quot;,
    &amp;quot;./src/css/main.css&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the above object omits other elements.&lt;/p&gt;

&lt;p&gt;The following gulp task, then, bundles the css files listed in &lt;code&gt;style&lt;/code&gt; attribute of your &lt;code&gt;package.json&lt;/code&gt;
and makes &lt;code&gt;bundle.css&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
browserify = require &amp;quot;browserify&amp;quot;
parcelify = require &amp;quot;parcelify&amp;quot;
source = require &amp;quot;vinyl-source-stream&amp;quot;

gulp.task &amp;quot;browserify&amp;quot;, -&amp;gt;
  b = browserify
    entries: [&amp;quot;./src/main.js&amp;quot;]
    extensions: [&amp;quot;.js&amp;quot;]
  parcelify b,
    bundles:
      style: &amp;quot;./public/bundle/bundle.css&amp;quot;
  b.bundle()
    .pipe source &amp;quot;bundle.js&amp;quot;
    .pipe gulp.dest &amp;quot;.public/bundle/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way works but to list up all css files in the &lt;code&gt;style&lt;/code&gt; attribute,
you need to know directory structures of all packages,
and such structures will be changed when packages are updated.
In other words, this way isn&amp;rsquo;t sustainable.&lt;/p&gt;

&lt;h2 id=&#34;rework&#34;&gt;rework&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;rework&lt;/a&gt; and a plugin of it &lt;a href=&#34;https://github.com/reworkcss/rework-npm&#34;&gt;rework-npm&lt;/a&gt;
search all &lt;code&gt;package.json&lt;/code&gt; of the packages you&amp;rsquo;re using, and import css files those packages provide.
In other words, you don&amp;rsquo;t need to list up css files in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/gulp-rework&#34;&gt;gulp-rework&lt;/a&gt; is a package to use rework from glup,
and we use it in this entry.&lt;/p&gt;

&lt;p&gt;First, we need to make a parent css file describing which css files to be imported by rework.
For example, the following parent css file imports css files provided from Bootstrap.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &amp;quot;bootstrap&amp;quot;;

/* We omit other entries. */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We put the parent css file in &lt;code&gt;./src/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we make the following gulp task,
which reads all css files in &lt;code&gt;./src/&lt;/code&gt; and makes a bundled css file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
rework = require &amp;quot;gulp-rework&amp;quot;
reworkNPM = require &amp;quot;rework-npm&amp;quot;

gulp.task &amp;quot;css&amp;quot;, -&amp;gt;
  gulp.src &amp;quot;./src/*.css&amp;quot;
    .pipe rework(reworkNPM())
    .pipe gulp.dest &amp;quot;./public/bundle/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running css task, rework imports Bootstrap&amp;rsquo;s css files and put them to the bundled file.&lt;/p&gt;

&lt;p&gt;In this method, you don&amp;rsquo;t need to check file structures of each package.
However, it, rework-npm, requires each package lists up its css file in its &lt;code&gt;package.json&lt;/code&gt;,
which means you don&amp;rsquo;t need to list up them but the authors of each package have to do that.&lt;/p&gt;

&lt;p&gt;After listing up css files in style attribute becomes a standard, this method would work well,
but right now there are still packages which doesn&amp;rsquo;t do that, and you have to do it instead.
The cost seems as same as one using Parcelify.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Incremental build of browserify and parcelify by gulp-watchify</title>
      <link>https://www.jkawamoto.info/blogs/incremental-build-by-gulp-watchify/</link>
      <pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/incremental-build-by-gulp-watchify/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;利用するライブラリが増えてビルドに時間がかかるようになったので，&lt;a href=&#34;https://github.com/substack/watchify&#34;&gt;watchify&lt;/a&gt; を使った差分ビルドを試してみる．タスクランナーに &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt; を使用しているので，&lt;a href=&#34;https://github.com/marcello3d/gulp-watchify&#34;&gt;gulp-watchify&lt;/a&gt; を使い，&lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt; と &lt;a href=&#34;https://github.com/rotundasoftware/parcelify&#34;&gt;Parcelify&lt;/a&gt;によるビルドを差分ビルドにする．&lt;/p&gt;

&lt;h1 id=&#34;gulp-watchify-の使い方&#34;&gt;gulp-watchify の使い方&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/marcello3d/gulp-watchify/blob/master/examples/simple/gulpfile.js&#34;&gt;サンプルファイル&lt;/a&gt; によると，単純な使い方は，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
$ = require(&amp;quot;gulp-load-plugins&amp;quot;)()
watching = false

gulp.task &amp;quot;browserify&amp;quot;, $.watchify (watchify) -&amp;gt;
  gulp.src &amp;quot;src/*.js&amp;quot;
    .pipe watchify
      watch:watching
    .pipe gulp.dest &amp;quot;public/js/&amp;quot;

gulp.task &amp;quot;watch&amp;quot;, -&amp;gt;
  watching = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となるようだ．これで，&lt;code&gt;gulp browserify&lt;/code&gt; とすれば通常のビルドを &lt;code&gt;gulp watch browserify&lt;/code&gt; とすれば，watchify による監視を始めることができる．&lt;/p&gt;

&lt;p&gt;なお，&lt;code&gt;gulp-load-plugins&lt;/code&gt; に関しては，&lt;a href=&#34;http://qiita.com/superbrothers/items/a342f3580b8acb5b9b06&#34;&gt;[gulp] 効率的にプラグインを読み込む&lt;/a&gt; を参照．上の例では変わらないが，require を減らすために使っている．&lt;/p&gt;

&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;

&lt;p&gt;gulp-watchify をインストールしただけでは，watchify はインストールされない模様．なので，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm i —save-dev watchify gulp-watchify
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と両方インストールするのを忘れずに．&lt;/p&gt;

&lt;h1 id=&#34;parcelify-の利用&#34;&gt;parcelify の利用&lt;/h1&gt;

&lt;p&gt;先ほどの例では，gulp-watchify の内部で browserify を呼んでいるため，parcelify を使う場所がない．gulp-watchify は，オプションで bundle の前に実行するコールバックを渡せるので，そこで parcelify を使う．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
parcelify = require &amp;quot;parcelify&amp;quot;
$ = require(&amp;quot;gulp-load-plugins&amp;quot;)()
watching = false

gulp.task &amp;quot;browserify&amp;quot;, $.watchify (watchify) -&amp;gt;
  gulp.src &amp;quot;src/main.js&amp;quot;
    .pipe watchify
      extensions: [&amp;quot;.js&amp;quot;]
      watch: watching
      setup: (bundle) -&amp;gt;
        parcelify bundle,
          bundles:
            style: &amp;quot;public/css/bundle.css&amp;quot;
    .pipe $.rename &amp;quot;bundle.js&amp;quot;
    .pipe gulp.dest &amp;quot;public/js/&amp;quot;

gulp.task &amp;quot;watch&amp;quot;, -&amp;gt;
  watching = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで先ほどと同様に，&lt;code&gt;gulp browserify&lt;/code&gt; とすれば通常のビルドを &lt;code&gt;gulp watch browserify&lt;/code&gt; とすれば，watchify による監視を始めることができる．&lt;/p&gt;

&lt;p&gt;上は，&lt;code&gt;main.js&lt;/code&gt; をエントリーにスクリプトとして，出力を &lt;code&gt;bundle.js&lt;/code&gt; にする例となっている．名前変更のために別途 &lt;code&gt;gulp-rename&lt;/code&gt; が必要．&lt;/p&gt;

&lt;p&gt;watchify のオプションには，browserify に渡すオプションと同じものを使える．上の例では，&lt;code&gt;extensions&lt;/code&gt; を渡している．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>