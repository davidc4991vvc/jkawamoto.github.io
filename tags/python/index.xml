<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Junpei Kawamoto</title>
    <link>https://www.jkawamoto.info/tags/python/</link>
    <description>Recent content in Python on Junpei Kawamoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016 Junpei Kawamoto</copyright>
    <lastBuildDate>Fri, 06 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jkawamoto.info/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test a test script for remote CI services locally</title>
      <link>https://www.jkawamoto.info/blogs/test-remote-ci-scripts-locally/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/test-remote-ci-scripts-locally/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;You usually employ remote CI services such as &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;
to automatically test your projects hosted in &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
Your tests should be passed in such CI services always because you have made sure
your codebase passes the tests before pushing.
However, &lt;code&gt;.travis.yml&lt;/code&gt;, the configuration file of Travis, sometimes has bugs and
your dependency list sometime loses any libraries.&lt;/p&gt;

&lt;p&gt;If your codebase fails tests in remote CI services, you need to fix bugs and
re-push, and your commit history gets messy.
If you&amp;rsquo;re working with colleague&amp;rsquo;s repository, you should care about it more.&lt;/p&gt;

&lt;p&gt;To evaluate those tests locally, I made &lt;a href=&#34;https://jkawamoto.github.io/loci/&#34;&gt;Loci&lt;/a&gt;,
which runs tests in a sandbox based on &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.
Loci currently supports &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; and
&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; projects.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Loci uses &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.
If you don&amp;rsquo;t have it, install it first.&lt;/p&gt;

&lt;p&gt;You can install Loci in several ways.
If you&amp;rsquo;re familiar with &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/jkawamoto/loci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or if you&amp;rsquo;re a &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; user, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew tap jkawamoto/loci
$ brew install loci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you can get a compiled binary from &lt;a href=&#34;https://github.com/jkawamoto/loci/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;If your current directory has &lt;code&gt;.travis.yml&lt;/code&gt;, just run &lt;code&gt;loci&lt;/code&gt; command.
If you want to test another file, give the path after &lt;code&gt;loci&lt;/code&gt; command like &lt;code&gt;loci &amp;lt;path&amp;gt;&lt;/code&gt;.
First time, Loci build container images which install dependent packages listed in &lt;code&gt;.travis.yml&lt;/code&gt;, and it may take long time,
but those images can be reusable.&lt;/p&gt;

&lt;p&gt;If you have cache servers of APT repository and PyPI repository,
give their addresses via &lt;code&gt;--apt-proxy&lt;/code&gt; and &lt;code&gt;--pypi-proxy&lt;/code&gt; flags.
Those cache servers may reduce network traffic and building time.&lt;/p&gt;

&lt;p&gt;Here is the whole command line options of Loci:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loci [global options] [script file]

  If script file isn&#39;t given, .travis.yml will be used.

GLOBAL OPTIONS:
   --name NAME, -n NAME  creating a container named NAME to run tests,
                         and that container will not be deleted.
   --tag TAG, -t TAG     creating an image named TAG.
   --base TAG, -b TAG    use image TAG as the base image.
                         (default: &amp;quot;ubuntu:latest&amp;quot;)
   --verbose             verbose mode, which prints Dockerfile and
                         entrypoint.sh.
   --apt-proxy URL       URL for a proxy server of apt repository.
                         [$APT_PROXY]
   --pypi-proxy URL      URL for a proxy server of pypi repository.
                         [$PYPI_PROXY]
   --http-proxy URL      URL for a http proxy server. [$HTTP_PROXY]
   --https-proxy URL     URL for a https proxy server. [$HTTPS_PROXY]
   --no-proxy LIST       Comma separated URL LIST for which proxies won&#39;t
                         be used. [$NO_PROXY]
   --help, -h            show help
   --version, -v         print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Loci currently supports Python and Go projects.
I&amp;rsquo;ll supports other languages and welcome any pull requests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Include GitHub repositories to requirements.txt</title>
      <link>https://www.jkawamoto.info/blogs/include-github-repositories-to-requirements-txt/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/include-github-repositories-to-requirements-txt/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This document explains how to include packages hosted in GitHub
but not not registered in &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPI&lt;/a&gt; into &lt;code&gt;requirements.txt&lt;/code&gt;,
and how to configure &lt;code&gt;setup.py&lt;/code&gt; referring &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;requirements-txt&#34;&gt;requirements.txt&lt;/h2&gt;

&lt;p&gt;Supposing &lt;a href=&#34;https://github.com/rgmining/common&#34;&gt;https://github.com/rgmining/common&lt;/a&gt; as the GitHub repository to be added to &lt;code&gt;requirements.txt&lt;/code&gt;,
the package information for the repository is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e git+https://github.com/rgmining/common.git#egg=rgmining_common-0.9.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format after &lt;code&gt;#egg=&lt;/code&gt; shoule be &lt;code&gt;&amp;lt;package name&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;.
If you&amp;rsquo;re using &lt;code&gt;pip-tools&lt;/code&gt; to compile &lt;code&gt;requirements.txt&lt;/code&gt;,
your &lt;code&gt;requirements.in&lt;/code&gt; should have the same clause.&lt;/p&gt;

&lt;h2 id=&#34;setup-py&#34;&gt;setup.py&lt;/h2&gt;

&lt;p&gt;To include &lt;code&gt;requirements.txt&lt;/code&gt; in &lt;code&gt;setup.py&lt;/code&gt;,
give the following &lt;code&gt;load_requires_from_file&lt;/code&gt; function to &lt;code&gt;install_requires&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from setuptools import setup, find_packages

def load_requires_from_file(filepath):
    with open(filepath) as fp:
        return [pkg_name.strip() for pkg_name in fp.readlines()]

setup(
    # Other clauses are omitted.
    install_requires=load_requires_from_file(&amp;quot;requirements.txt&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your &lt;code&gt;requirements.txt&lt;/code&gt; has URLs,
&lt;code&gt;load_requires_from_file&lt;/code&gt; function should be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def take_package_name(name):
    if name.startswith(&amp;quot;-e&amp;quot;):
        return name[name.find(&amp;quot;=&amp;quot;)+1:name.rfind(&amp;quot;-&amp;quot;)]
    else:
        return name.strip()

def load_requires_from_file(filepath):
    with open(filepath) as fp:
        return [take_package_name(pkg_name) for pkg_name in fp.readlines()]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and give those URLs via &lt;code&gt;dependency_link&lt;/code&gt; attribute in &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def load_links_from_file(filepath):
    res = []
    with open(filepath) as fp:
        for pkg_name in fp.readlines():
            if pkg_name.startswith(&amp;quot;-e&amp;quot;):
                res.append(pkg_name.split(&amp;quot; &amp;quot;)[1])
    return res

setup(
    # Other clauses are omitted.
    install_requires=load_requires_from_file(&amp;quot;requirements.txt&amp;quot;),
    dependency_links=load_links_from_file(&amp;quot;requirements.txt&amp;quot;),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, &lt;code&gt;python setup.py test&lt;/code&gt; downloads packages from GitHub and runs tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install numba to mac</title>
      <link>https://www.jkawamoto.info/blogs/install-numba-to-mac/</link>
      <pubDate>Fri, 29 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/install-numba-to-mac/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://numba.pydata.org/&#34;&gt;numba&lt;/a&gt; provides an easy optimization for python codes
but &lt;code&gt;pip&lt;/code&gt; doesn&amp;rsquo;t work to install numba.
This entry explains installation and import way of numba.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;numba requires &lt;a href=&#34;http://llvm.org/&#34;&gt;&lt;code&gt;llvm&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;enum34&lt;/code&gt;,
and the required version of llvm isn&amp;rsquo;t the newest version 3.8.x but version 3.7.x.
To install such version, you need to tap &lt;code&gt;homebrew/versions&lt;/code&gt; and set environ variable &lt;code&gt;LLVM_CONFIG&lt;/code&gt;.
The following steps do that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew tap homebrew/versions
$ brew install homebrew/versions/llvm37
$ export LLVM_CONFIG=/usr/local/Cellar/llvm37/3.7.1/bin/llvm-config-3.7

$ pip install enum34
$ pip install numba
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;import-numba&#34;&gt;Import numba&lt;/h2&gt;

&lt;p&gt;We should prepare import even if our source code will run without numba,
and we replace no-op decorate if numba cannot be imported.
The following source code do that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:
    from numba import jit
except ImportError:
    def jit(*args, **_kwargs):
        if len(args) &amp;gt; 0 and hasattr(args[0], &amp;quot;__call__&amp;quot;):
            return args[0]
        else:
            def _(func):
                return func
            return _
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your code has other decorators than &lt;code&gt;@jit&lt;/code&gt;, you need to define those decorators,
and in this case, you need to give types as texts not objects.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/teoliphant/numba-siam-2013&#34;&gt;http://www.slideshare.net/teoliphant/numba-siam-2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2833162&#34;&gt;http://dl.acm.org/citation.cfm?id=2833162&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>データ解析のための統計モデリング入門 第10章 を PyMC で解く</title>
      <link>https://www.jkawamoto.info/blog-ja/pymc-lesson-10/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blog-ja/pymc-lesson-10/</guid>
      <description>

&lt;script src=&#34;https://gist.github.com/jkawamoto/4a136615118fffe2930c54773389d079.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;参考書籍&#34;&gt;参考書籍&lt;/h2&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=FFFFFF&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=jkwf4mew-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=400006973X&amp;linkId=e5d3611547b0a6ff789dc2ce355b7a15&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
  </channel>
</rss>