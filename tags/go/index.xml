<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Junpei Kawamoto</title>
    <link>https://www.jkawamoto.info/tags/go/</link>
    <description>Recent content in Go on Junpei Kawamoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016 Junpei Kawamoto</copyright>
    <lastBuildDate>Fri, 06 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jkawamoto.info/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test a test script for remote CI services locally</title>
      <link>https://www.jkawamoto.info/blogs/test-remote-ci-scripts-locally/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/test-remote-ci-scripts-locally/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;You usually employ remote CI services such as &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;
to automatically test your projects hosted in &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
Your tests should be passed in such CI services always because you have made sure
your codebase passes the tests before pushing.
However, &lt;code&gt;.travis.yml&lt;/code&gt;, the configuration file of Travis, sometimes has bugs and
your dependency list sometime loses any libraries.&lt;/p&gt;

&lt;p&gt;If your codebase fails tests in remote CI services, you need to fix bugs and
re-push, and your commit history gets messy.
If you&amp;rsquo;re working with colleague&amp;rsquo;s repository, you should care about it more.&lt;/p&gt;

&lt;p&gt;To evaluate those tests locally, I made &lt;a href=&#34;https://jkawamoto.github.io/loci/&#34;&gt;Loci&lt;/a&gt;,
which runs tests in a sandbox based on &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.
Loci currently supports &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; and
&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; projects.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Loci uses &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.
If you don&amp;rsquo;t have it, install it first.&lt;/p&gt;

&lt;p&gt;You can install Loci in several ways.
If you&amp;rsquo;re familiar with &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/jkawamoto/loci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or if you&amp;rsquo;re a &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; user, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew tap jkawamoto/loci
$ brew install loci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you can get a compiled binary from &lt;a href=&#34;https://github.com/jkawamoto/loci/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;If your current directory has &lt;code&gt;.travis.yml&lt;/code&gt;, just run &lt;code&gt;loci&lt;/code&gt; command.
If you want to test another file, give the path after &lt;code&gt;loci&lt;/code&gt; command like &lt;code&gt;loci &amp;lt;path&amp;gt;&lt;/code&gt;.
First time, Loci build container images which install dependent packages listed in &lt;code&gt;.travis.yml&lt;/code&gt;, and it may take long time,
but those images can be reusable.&lt;/p&gt;

&lt;p&gt;If you have cache servers of APT repository and PyPI repository,
give their addresses via &lt;code&gt;--apt-proxy&lt;/code&gt; and &lt;code&gt;--pypi-proxy&lt;/code&gt; flags.
Those cache servers may reduce network traffic and building time.&lt;/p&gt;

&lt;p&gt;Here is the whole command line options of Loci:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loci [global options] [script file]

  If script file isn&#39;t given, .travis.yml will be used.

GLOBAL OPTIONS:
   --name NAME, -n NAME  creating a container named NAME to run tests,
                         and that container will not be deleted.
   --tag TAG, -t TAG     creating an image named TAG.
   --base TAG, -b TAG    use image TAG as the base image.
                         (default: &amp;quot;ubuntu:latest&amp;quot;)
   --verbose             verbose mode, which prints Dockerfile and
                         entrypoint.sh.
   --apt-proxy URL       URL for a proxy server of apt repository.
                         [$APT_PROXY]
   --pypi-proxy URL      URL for a proxy server of pypi repository.
                         [$PYPI_PROXY]
   --http-proxy URL      URL for a http proxy server. [$HTTP_PROXY]
   --https-proxy URL     URL for a https proxy server. [$HTTPS_PROXY]
   --no-proxy LIST       Comma separated URL LIST for which proxies won&#39;t
                         be used. [$NO_PROXY]
   --help, -h            show help
   --version, -v         print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Loci currently supports Python and Go projects.
I&amp;rsquo;ll supports other languages and welcome any pull requests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Receive logs from Stackdriver Logging</title>
      <link>https://www.jkawamoto.info/blogs/get-logs-from-stackdriver-logging/</link>
      <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/get-logs-from-stackdriver-logging/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In order to obtain log data from &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt;,
using the &lt;a href=&#34;https://cloud.google.com/stackdriver/&#34;&gt;Stackdriver&lt;/a&gt; client which
&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging/logadmin&#34;&gt;logadmin&lt;/a&gt; package provides
is one of the easiest ways.
But, the type of log entries returned by the client is
&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging#Entry&#34;&gt;logging.Entry&lt;/a&gt;,
and the type of payloads is &lt;code&gt;interface{}&lt;/code&gt;, which means you need to cast payloads to access their fields.
This article introduces how to cast them with a pre-defined structure.&lt;/p&gt;

&lt;h2 id=&#34;logadmin-package&#34;&gt;logadmin package&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging/logadmin&#34;&gt;logadmin&lt;/a&gt; provides interfaces to access logs
in &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following code obtains log entries matching a query in variable &lt;code&gt;filter&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
    &amp;quot;cloud.google.com/go/logging/logadmin&amp;quot;
    &amp;quot;golang.org/x/net/context&amp;quot;
    &amp;quot;google.golang.org/api/iterator&amp;quot;
)

func GetLogEntries(filter string) error{
    ctx := context.Background()
    client, err := logadmin.NewClient(ctx, &amp;quot;your-project-id&amp;quot;)
    if err != nil {
        return err
    }
    defer client.Close()

    iter := client.Entries(ctx, logadmin.Filter(filter))
    for {
        e, err := iter.Next()
        if err == iterator.Done {
            return nil
        } else if err != nil {
            return err
        }
        // Use log entry `e`, of which type is logging.Entry.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logging-entry&#34;&gt;logging.Entry&lt;/h2&gt;

&lt;p&gt;The type of log entries which the logadmin client returns is
&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging#Entry&#34;&gt;logging.Entry&lt;/a&gt;,
and the type of their payload is &lt;code&gt;interface{}&lt;/code&gt;.
To access each field of those payloads, you need to case them.
In most cases, you can cast those payloads to pointers of
&lt;a href=&#34;https://godoc.org/github.com/golang/protobuf/ptypes/struct#Struct&#34;&gt;&lt;code&gt;structpb.Struct&lt;/code&gt;&lt;/a&gt;.
Since &lt;code&gt;structpb.Struct&lt;/code&gt; is a kind of meta-structure,
you also need to convert an instance of &lt;code&gt;structpb.Struct&lt;/code&gt; to another structure.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&#34;https://github.com/jkawamoto/structpbconv&#34;&gt;&lt;code&gt;structpbconv&lt;/code&gt;&lt;/a&gt; package
provides such conversion.&lt;/p&gt;

&lt;h2 id=&#34;structpbconv&#34;&gt;structpbconv&lt;/h2&gt;

&lt;p&gt;The following code converts a log payload of a VM instance&amp;rsquo;s activity_log
in &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;Compute Engine&lt;/a&gt;
from a &lt;code&gt;structpb.Struct&lt;/code&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
    &amp;quot;github.com/golang/protobuf/ptypes/struct&amp;quot;
    &amp;quot;github.com/jkawamoto/structpbconv&amp;quot;
)


type ActivityPayload struct {
    EventTimestampUs string `structpb:&amp;quot;event_timestamp_us&amp;quot;`
    EventType        string `structpb:&amp;quot;event_type&amp;quot;`
    TraceID          string `structpb:&amp;quot;trace_id&amp;quot;`
    Actor            struct {
        User string
    }
    Resource struct {
        Zone string
        Type string
        ID   string
        Name string
    }
    Version      string
    EventSubtype string `structpb:&amp;quot;event_subtype&amp;quot;`
    Operation    struct {
        Zone string
        Type string
        ID   string
        Name string
    }
}

func NewActivityPayload(payload *structpb.Struct) *ActivityPayload {
    var res ActivityPayload
    structpbconv.Convert(payload, &amp;amp;res)
    return &amp;amp;res
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I defined &lt;code&gt;ActivityPayload&lt;/code&gt; structure according to an actual payload of activity_log.
To give a mapping of field names, use a &lt;code&gt;structpb&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Finally, we can access each field like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Getting log entries of which event types are GCE_OPERATION_DONE.
iter := client.Entries(
  ctx, logadmin.Filter(&amp;quot;jsonPayload.event_type = \&amp;quot;GCE_OPERATION_DONE\&amp;quot;&amp;quot;))
for {
    e, err := iter.Next()
    if err == iterator.Done {
        return nil
    } else if err != nil {
        return err
    }

    // Converting the payload.
    if s, ok := e.Payload.(*structpb.Struct); ok {
        payload := NewActivityPayload(s)

        // Printing trace_id.
        fmt.Println(payload.TraceID)
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>