<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Junpei Kawamoto</title>
    <link>https://www.jkawamoto.info/</link>
    <description>Recent content on Junpei Kawamoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016 Junpei Kawamoto</copyright>
    <lastBuildDate>Fri, 06 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jkawamoto.info/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test a test script for remote CI services locally</title>
      <link>https://www.jkawamoto.info/blogs/test-remote-ci-scripts-locally/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/test-remote-ci-scripts-locally/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;You usually employ remote CI services such as &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;
to automatically test your projects hosted in &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
Your tests should be passed in such CI services always because you have made sure
your codebase passes the tests before pushing.
However, &lt;code&gt;.travis.yml&lt;/code&gt;, the configuration file of Travis, sometimes has bugs and
your dependency list sometime loses any libraries.&lt;/p&gt;

&lt;p&gt;If your codebase fails tests in remote CI services, you need to fix bugs and
re-push, and your commit history gets messy.
If you&amp;rsquo;re working with colleague&amp;rsquo;s repository, you should care about it more.&lt;/p&gt;

&lt;p&gt;To evaluate those tests locally, I made &lt;a href=&#34;https://jkawamoto.github.io/loci/&#34;&gt;Loci&lt;/a&gt;,
which runs tests in a sandbox based on &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.
Loci currently supports &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; and
&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; projects.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Loci uses &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.
If you don&amp;rsquo;t have it, install it first.&lt;/p&gt;

&lt;p&gt;You can install Loci in several ways.
If you&amp;rsquo;re familiar with &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/jkawamoto/loci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or if you&amp;rsquo;re a &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; user, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew tap jkawamoto/loci
$ brew install loci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you can get a compiled binary from &lt;a href=&#34;https://github.com/jkawamoto/loci/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;If your current directory has &lt;code&gt;.travis.yml&lt;/code&gt;, just run &lt;code&gt;loci&lt;/code&gt; command.
If you want to test another file, give the path after &lt;code&gt;loci&lt;/code&gt; command like &lt;code&gt;loci &amp;lt;path&amp;gt;&lt;/code&gt;.
First time, Loci build container images which install dependent packages listed in &lt;code&gt;.travis.yml&lt;/code&gt;, and it may take long time,
but those images can be reusable.&lt;/p&gt;

&lt;p&gt;If you have cache servers of APT repository and PyPI repository,
give their addresses via &lt;code&gt;--apt-proxy&lt;/code&gt; and &lt;code&gt;--pypi-proxy&lt;/code&gt; flags.
Those cache servers may reduce network traffic and building time.&lt;/p&gt;

&lt;p&gt;Here is the whole command line options of Loci:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loci [global options] [script file]

  If script file isn&#39;t given, .travis.yml will be used.

GLOBAL OPTIONS:
   --name NAME, -n NAME  creating a container named NAME to run tests,
                         and that container will not be deleted.
   --tag TAG, -t TAG     creating an image named TAG.
   --base TAG, -b TAG    use image TAG as the base image.
                         (default: &amp;quot;ubuntu:latest&amp;quot;)
   --verbose             verbose mode, which prints Dockerfile and
                         entrypoint.sh.
   --apt-proxy URL       URL for a proxy server of apt repository.
                         [$APT_PROXY]
   --pypi-proxy URL      URL for a proxy server of pypi repository.
                         [$PYPI_PROXY]
   --http-proxy URL      URL for a http proxy server. [$HTTP_PROXY]
   --https-proxy URL     URL for a https proxy server. [$HTTPS_PROXY]
   --no-proxy LIST       Comma separated URL LIST for which proxies won&#39;t
                         be used. [$NO_PROXY]
   --help, -h            show help
   --version, -v         print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Loci currently supports Python and Go projects.
I&amp;rsquo;ll supports other languages and welcome any pull requests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Receive logs from Stackdriver Logging</title>
      <link>https://www.jkawamoto.info/blogs/get-logs-from-stackdriver-logging/</link>
      <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/get-logs-from-stackdriver-logging/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In order to obtain log data from &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt;,
using the &lt;a href=&#34;https://cloud.google.com/stackdriver/&#34;&gt;Stackdriver&lt;/a&gt; client which
&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging/logadmin&#34;&gt;logadmin&lt;/a&gt; package provides
is one of the easiest ways.
But, the type of log entries returned by the client is
&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging#Entry&#34;&gt;logging.Entry&lt;/a&gt;,
and the type of payloads is &lt;code&gt;interface{}&lt;/code&gt;, which means you need to cast payloads to access their fields.
This article introduces how to cast them with a pre-defined structure.&lt;/p&gt;

&lt;h2 id=&#34;logadmin-package&#34;&gt;logadmin package&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging/logadmin&#34;&gt;logadmin&lt;/a&gt; provides interfaces to access logs
in &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following code obtains log entries matching a query in variable &lt;code&gt;filter&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
    &amp;quot;cloud.google.com/go/logging/logadmin&amp;quot;
    &amp;quot;golang.org/x/net/context&amp;quot;
    &amp;quot;google.golang.org/api/iterator&amp;quot;
)

func GetLogEntries(filter string) error{
    ctx := context.Background()
    client, err := logadmin.NewClient(ctx, &amp;quot;your-project-id&amp;quot;)
    if err != nil {
        return err
    }
    defer client.Close()

    iter := client.Entries(ctx, logadmin.Filter(filter))
    for {
        e, err := iter.Next()
        if err == iterator.Done {
            return nil
        } else if err != nil {
            return err
        }
        // Use log entry `e`, of which type is logging.Entry.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logging-entry&#34;&gt;logging.Entry&lt;/h2&gt;

&lt;p&gt;The type of log entries which the logadmin client returns is
&lt;a href=&#34;https://godoc.org/cloud.google.com/go/logging#Entry&#34;&gt;logging.Entry&lt;/a&gt;,
and the type of their payload is &lt;code&gt;interface{}&lt;/code&gt;.
To access each field of those payloads, you need to case them.
In most cases, you can cast those payloads to pointers of
&lt;a href=&#34;https://godoc.org/github.com/golang/protobuf/ptypes/struct#Struct&#34;&gt;&lt;code&gt;structpb.Struct&lt;/code&gt;&lt;/a&gt;.
Since &lt;code&gt;structpb.Struct&lt;/code&gt; is a kind of meta-structure,
you also need to convert an instance of &lt;code&gt;structpb.Struct&lt;/code&gt; to another structure.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&#34;https://github.com/jkawamoto/structpbconv&#34;&gt;&lt;code&gt;structpbconv&lt;/code&gt;&lt;/a&gt; package
provides such conversion.&lt;/p&gt;

&lt;h2 id=&#34;structpbconv&#34;&gt;structpbconv&lt;/h2&gt;

&lt;p&gt;The following code converts a log payload of a VM instance&amp;rsquo;s activity_log
in &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;Compute Engine&lt;/a&gt;
from a &lt;code&gt;structpb.Struct&lt;/code&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
    &amp;quot;github.com/golang/protobuf/ptypes/struct&amp;quot;
    &amp;quot;github.com/jkawamoto/structpbconv&amp;quot;
)


type ActivityPayload struct {
    EventTimestampUs string `structpb:&amp;quot;event_timestamp_us&amp;quot;`
    EventType        string `structpb:&amp;quot;event_type&amp;quot;`
    TraceID          string `structpb:&amp;quot;trace_id&amp;quot;`
    Actor            struct {
        User string
    }
    Resource struct {
        Zone string
        Type string
        ID   string
        Name string
    }
    Version      string
    EventSubtype string `structpb:&amp;quot;event_subtype&amp;quot;`
    Operation    struct {
        Zone string
        Type string
        ID   string
        Name string
    }
}

func NewActivityPayload(payload *structpb.Struct) *ActivityPayload {
    var res ActivityPayload
    structpbconv.Convert(payload, &amp;amp;res)
    return &amp;amp;res
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I defined &lt;code&gt;ActivityPayload&lt;/code&gt; structure according to an actual payload of activity_log.
To give a mapping of field names, use a &lt;code&gt;structpb&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Finally, we can access each field like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Getting log entries of which event types are GCE_OPERATION_DONE.
iter := client.Entries(
  ctx, logadmin.Filter(&amp;quot;jsonPayload.event_type = \&amp;quot;GCE_OPERATION_DONE\&amp;quot;&amp;quot;))
for {
    e, err := iter.Next()
    if err == iterator.Done {
        return nil
    } else if err != nil {
        return err
    }

    // Converting the payload.
    if s, ok := e.Payload.(*structpb.Struct); ok {
        payload := NewActivityPayload(s)

        // Printing trace_id.
        fmt.Println(payload.TraceID)
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Incremental build of browserify and parcelify by gulp-watchify</title>
      <link>https://www.jkawamoto.info/blogs/incremental-build-by-gulp-watchify/</link>
      <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/incremental-build-by-gulp-watchify/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/substack/watchify&#34;&gt;watchify&lt;/a&gt; supports incremental build to reduce building time,
and &lt;a href=&#34;https://github.com/marcello3d/gulp-watchify&#34;&gt;gulp-watchify&lt;/a&gt; is a &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt; plugin of watchify.
This post explains how to apply watchfy to &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt; and &lt;a href=&#34;https://github.com/rotundasoftware/parcelify&#34;&gt;Parcelify&lt;/a&gt;
with &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;gulp-watchify&#34;&gt;gulp-watchify&lt;/h2&gt;

&lt;p&gt;From a &lt;a href=&#34;https://github.com/marcello3d/gulp-watchify/blob/master/examples/simple/gulpfile.js&#34;&gt;sample file&lt;/a&gt;,
basic usage is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
$ = require(&amp;quot;gulp-load-plugins&amp;quot;)()
watching = false

gulp.task &amp;quot;browserify&amp;quot;, $.watchify (watchify) -&amp;gt;
  gulp.src &amp;quot;src/*.js&amp;quot;
    .pipe watchify
      watch:watching
    .pipe gulp.dest &amp;quot;public/js/&amp;quot;

gulp.task &amp;quot;watch&amp;quot;, -&amp;gt;
  watching = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By this task file, &lt;code&gt;gulp browserify&lt;/code&gt; builds normally,
and &lt;code&gt;gulp watch browserify&lt;/code&gt; starts watching script files to incremental build.&lt;/p&gt;

&lt;p&gt;Note that installing gulp-watchify doesn&amp;rsquo;t install watchify, and you need to run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm i —save-dev watchify gulp-watchify
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-parcelify&#34;&gt;Use parcelify&lt;/h2&gt;

&lt;p&gt;gulp-watchify takes callback functions which will be called before bundling.
We use parcelify in the callback function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
parcelify = require &amp;quot;parcelify&amp;quot;
$ = require(&amp;quot;gulp-load-plugins&amp;quot;)()
watching = false

gulp.task &amp;quot;browserify&amp;quot;, $.watchify (watchify) -&amp;gt;
  gulp.src &amp;quot;src/main.js&amp;quot;
    .pipe watchify
      extensions: [&amp;quot;.js&amp;quot;]
      watch: watching
      setup: (bundle) -&amp;gt;
        parcelify bundle,
          bundles:
            style: &amp;quot;public/css/bundle.css&amp;quot;
    .pipe $.rename &amp;quot;bundle.js&amp;quot;
    .pipe gulp.dest &amp;quot;public/js/&amp;quot;

gulp.task &amp;quot;watch&amp;quot;, -&amp;gt;
  watching = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task file reads &lt;code&gt;main.js&lt;/code&gt; as the entry script and outputs &lt;code&gt;bundle.js&lt;/code&gt;.
To rename file names, it requires &lt;code&gt;gulp-rename&lt;/code&gt;, too.&lt;/p&gt;

&lt;p&gt;watchify takes same options as ones browserify takes.
The above example takes &lt;code&gt;extensions&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Import CSS files from npm libraries</title>
      <link>https://www.jkawamoto.info/blogs/import-css-from-npm/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/import-css-from-npm/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Client-side package management tool has been replacing to &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; from &lt;a href=&#34;http://bower.io/&#34;&gt;bower&lt;/a&gt;,
and client-side JavaScript packages are imported with &lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt;.
However, it is difficult to import CSS files.
Supposing importing bootstrap&amp;rsquo;s css installed with npm, which is installed by &lt;code&gt;npm i --save bootstrap&lt;/code&gt;, to &lt;code&gt;bundle.css&lt;/code&gt;,
this entry explains two importing ways;
&lt;a href=&#34;https://github.com/rotundasoftware/parcelify&#34;&gt;Parcelify&lt;/a&gt; and &lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;rework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We assume to use &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt; as the task runner,
and we investigate ways that don&amp;rsquo;t fix directory structure.&lt;/p&gt;

&lt;h2 id=&#34;parcelify&#34;&gt;Parcelify&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rotundasoftware/parcelify&#34;&gt;Parcelify&lt;/a&gt; is a famous plugin of Browserify,
which means if your project doesn&amp;rsquo;t use JavaScript, you need to add a dummy script file to use Parcelify.
To use Parcelify, you need to list up css files at &lt;code&gt;style&lt;/code&gt; attribute in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, the following &lt;code&gt;package.json&lt;/code&gt; imports css files provided from Bootstrap.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;style&amp;quot;: [
    &amp;quot;./node_modules/bootstrap/dist/css/bootstrap.min.css&amp;quot;,
    &amp;quot;./src/css/main.css&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the above object omits other elements.&lt;/p&gt;

&lt;p&gt;The following gulp task, then, bundles the css files listed in &lt;code&gt;style&lt;/code&gt; attribute of your &lt;code&gt;package.json&lt;/code&gt;
and makes &lt;code&gt;bundle.css&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
browserify = require &amp;quot;browserify&amp;quot;
parcelify = require &amp;quot;parcelify&amp;quot;
source = require &amp;quot;vinyl-source-stream&amp;quot;

gulp.task &amp;quot;browserify&amp;quot;, -&amp;gt;
  b = browserify
    entries: [&amp;quot;./src/main.js&amp;quot;]
    extensions: [&amp;quot;.js&amp;quot;]
  parcelify b,
    bundles:
      style: &amp;quot;./public/bundle/bundle.css&amp;quot;
  b.bundle()
    .pipe source &amp;quot;bundle.js&amp;quot;
    .pipe gulp.dest &amp;quot;.public/bundle/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way works but to list up all css files in the &lt;code&gt;style&lt;/code&gt; attribute,
you need to know directory structures of all packages,
and such structures will be changed when packages are updated.
In other words, this way isn&amp;rsquo;t sustainable.&lt;/p&gt;

&lt;h2 id=&#34;rework&#34;&gt;rework&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;rework&lt;/a&gt; and a plugin of it &lt;a href=&#34;https://github.com/reworkcss/rework-npm&#34;&gt;rework-npm&lt;/a&gt;
search all &lt;code&gt;package.json&lt;/code&gt; of the packages you&amp;rsquo;re using, and import css files those packages provide.
In other words, you don&amp;rsquo;t need to list up css files in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/gulp-rework&#34;&gt;gulp-rework&lt;/a&gt; is a package to use rework from glup,
and we use it in this entry.&lt;/p&gt;

&lt;p&gt;First, we need to make a parent css file describing which css files to be imported by rework.
For example, the following parent css file imports css files provided from Bootstrap.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &amp;quot;bootstrap&amp;quot;;

/* We omit other entries. */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We put the parent css file in &lt;code&gt;./src/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we make the following gulp task,
which reads all css files in &lt;code&gt;./src/&lt;/code&gt; and makes a bundled css file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;gulp = require &amp;quot;gulp&amp;quot;
rework = require &amp;quot;gulp-rework&amp;quot;
reworkNPM = require &amp;quot;rework-npm&amp;quot;

gulp.task &amp;quot;css&amp;quot;, -&amp;gt;
  gulp.src &amp;quot;./src/*.css&amp;quot;
    .pipe rework(reworkNPM())
    .pipe gulp.dest &amp;quot;./public/bundle/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running css task, rework imports Bootstrap&amp;rsquo;s css files and put them to the bundled file.&lt;/p&gt;

&lt;p&gt;In this method, you don&amp;rsquo;t need to check file structures of each package.
However, it, rework-npm, requires each package lists up its css file in its &lt;code&gt;package.json&lt;/code&gt;,
which means you don&amp;rsquo;t need to list up them but the authors of each package have to do that.&lt;/p&gt;

&lt;p&gt;After listing up css files in style attribute becomes a standard, this method would work well,
but right now there are still packages which doesn&amp;rsquo;t do that, and you have to do it instead.
The cost seems as same as one using Parcelify.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Include GitHub repositories to requirements.txt</title>
      <link>https://www.jkawamoto.info/blogs/include-github-repositories-to-requirements-txt/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/include-github-repositories-to-requirements-txt/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This document explains how to include packages hosted in GitHub
but not not registered in &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPI&lt;/a&gt; into &lt;code&gt;requirements.txt&lt;/code&gt;,
and how to configure &lt;code&gt;setup.py&lt;/code&gt; referring &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;requirements-txt&#34;&gt;requirements.txt&lt;/h2&gt;

&lt;p&gt;Supposing &lt;a href=&#34;https://github.com/rgmining/common&#34;&gt;https://github.com/rgmining/common&lt;/a&gt; as the GitHub repository to be added to &lt;code&gt;requirements.txt&lt;/code&gt;,
the package information for the repository is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e git+https://github.com/rgmining/common.git#egg=rgmining_common-0.9.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format after &lt;code&gt;#egg=&lt;/code&gt; shoule be &lt;code&gt;&amp;lt;package name&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;.
If you&amp;rsquo;re using &lt;code&gt;pip-tools&lt;/code&gt; to compile &lt;code&gt;requirements.txt&lt;/code&gt;,
your &lt;code&gt;requirements.in&lt;/code&gt; should have the same clause.&lt;/p&gt;

&lt;h2 id=&#34;setup-py&#34;&gt;setup.py&lt;/h2&gt;

&lt;p&gt;To include &lt;code&gt;requirements.txt&lt;/code&gt; in &lt;code&gt;setup.py&lt;/code&gt;,
give the following &lt;code&gt;load_requires_from_file&lt;/code&gt; function to &lt;code&gt;install_requires&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from setuptools import setup, find_packages

def load_requires_from_file(filepath):
    with open(filepath) as fp:
        return [pkg_name.strip() for pkg_name in fp.readlines()]

setup(
    # Other clauses are omitted.
    install_requires=load_requires_from_file(&amp;quot;requirements.txt&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your &lt;code&gt;requirements.txt&lt;/code&gt; has URLs,
&lt;code&gt;load_requires_from_file&lt;/code&gt; function should be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def take_package_name(name):
    if name.startswith(&amp;quot;-e&amp;quot;):
        return name[name.find(&amp;quot;=&amp;quot;)+1:name.rfind(&amp;quot;-&amp;quot;)]
    else:
        return name.strip()

def load_requires_from_file(filepath):
    with open(filepath) as fp:
        return [take_package_name(pkg_name) for pkg_name in fp.readlines()]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and give those URLs via &lt;code&gt;dependency_link&lt;/code&gt; attribute in &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def load_links_from_file(filepath):
    res = []
    with open(filepath) as fp:
        for pkg_name in fp.readlines():
            if pkg_name.startswith(&amp;quot;-e&amp;quot;):
                res.append(pkg_name.split(&amp;quot; &amp;quot;)[1])
    return res

setup(
    # Other clauses are omitted.
    install_requires=load_requires_from_file(&amp;quot;requirements.txt&amp;quot;),
    dependency_links=load_links_from_file(&amp;quot;requirements.txt&amp;quot;),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, &lt;code&gt;python setup.py test&lt;/code&gt; downloads packages from GitHub and runs tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compiling a Sphinx document on Wercker</title>
      <link>https://www.jkawamoto.info/blogs/sphinx-on-wercker/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/sphinx-on-wercker/</guid>
      <description>

&lt;p&gt;After import your repository, application page looks like this. Move on the workflow tab.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-1.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-1.png&#34; alt=&#34;Fig. 1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open configuration of the &lt;code&gt;build&lt;/code&gt; pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-2.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-2.png&#34; alt=&#34;Fig. 2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the configuration of the build pipeline, scroll down to Permission level.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-3.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-3.png&#34; alt=&#34;Fig. 3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And choose &lt;code&gt;execute pipeline&lt;/code&gt; in order to prevent someone starting pipeline and see detailed logs.
Also set &lt;code&gt;gh-pages&lt;/code&gt; to Ignore branches so that Wercker will not start building documents after pushing to &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-4.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-4.png&#34; alt=&#34;Fig. 4&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, back to the workflow tab and add a new pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-5.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-5.png&#34; alt=&#34;Fig. 5&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we name the new pipeline &lt;code&gt;deploy&lt;/code&gt;, and hook type should be default to be chained to the build pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-6.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-6.png&#34; alt=&#34;Fig. 6&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to push built documents to GitHub, this pipeline should know an access token of GitHub.
Add such key with name &lt;code&gt;GIT_TOKEN&lt;/code&gt; and protected option in the environment variables section of &lt;code&gt;deploy&lt;/code&gt; pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-7.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-7.png&#34; alt=&#34;Fig. 7&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The token can be obtained in &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt;.
If your repository is public, you only need a token with &lt;code&gt;public_repo&lt;/code&gt; scope. Otherwise, you may need a token with &lt;code&gt;repo&lt;/code&gt; scope.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-8.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-8.png&#34; alt=&#34;Fig. 8&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding &lt;code&gt;GIT_TOKEN&lt;/code&gt;, check Permission level is Execute pipelines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-9.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-9.png&#34; alt=&#34;Fig. 9&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, make a workflow connecting the &lt;code&gt;deploy&lt;/code&gt; pipeline to the &lt;code&gt;build&lt;/code&gt; one in Workflow tab. Make sure this workflow only runs on master branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-10.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-10.png&#34; alt=&#34;Fig. 10&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end, the workflow looks like the followings.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jkawamoto.info/fig/2016-08-18-11.png&#34;&gt;&lt;img src=&#34;https://www.jkawamoto.info/fig/2016-08-18-11.png&#34; alt=&#34;Fig. 11&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you need to add &lt;code&gt;wercker.yml&lt;/code&gt; in your branch root.
You use Sphinx to build documents of which sources are in &lt;code&gt;docs&lt;/code&gt;. &lt;code&gt;wercker.yml&lt;/code&gt; may be there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;box: jkawamoto/ghp-box
build:
  steps:
    - jkawamoto/sphinx:
        basedir: docs
        packages: sphinx_rtd_theme
deploy:
  steps:
    - jkawamoto/ghp-import:
        token: $GIT_TOKEN
        basedir: docs/build/html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also specifies to install &lt;code&gt;sphinx_rtd_theme&lt;/code&gt;. Make sure after running &lt;code&gt;make html&lt;/code&gt; in &lt;code&gt;doc&lt;/code&gt; folder, your documents are in &lt;code&gt;docs/build/html&lt;/code&gt;. Otherwise, edit &lt;code&gt;basedir&lt;/code&gt; in the last line.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkawamoto/dockerfiles/tree/master/wercker-ghp-box&#34;&gt;jkawamoto/ghp-box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkawamoto/wercker-sphinx-step&#34;&gt;jkawamoto/sphinx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkawamoto/wercker-ghp-import-step&#34;&gt;jkawamoto/ghp-import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>講義ビデオ: 形式言語とオートマトン</title>
      <link>https://www.jkawamoto.info/blog-ja/2016-08-17/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blog-ja/2016-08-17/</guid>
      <description>

&lt;h2 id=&#34;教科書&#34;&gt;教科書&lt;/h2&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=FFFFFF&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=jkwf4mew-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4781910262&amp;linkId=b80a4550067a9b6fd184676c56847ff0&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=FFFFFF&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=jkwf4mew-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4781910270&amp;linkId=715b45764867431bfea1b57063f72787&#34;&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/2b024rd&#34;&gt;講義ページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;講義ビデオ&#34;&gt;講義ビデオ&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2hib899vlGM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/PoGX-d4dePc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/81V_txlnQCE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MOydFottvIc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/P92FTTBL4sw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/W6L9mIhfkYk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/sJmS9hRmcMc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/g_tnwhYoOjo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WOU3XGn23Ck&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/avqMn9ykuR0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Internationalization (i18n) of Meteor applications</title>
      <link>https://www.jkawamoto.info/blogs/i18n-package-in-meteor/</link>
      <pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/i18n-package-in-meteor/</guid>
      <description>

&lt;h2 id=&#34;universe-i18n&#34;&gt;universe:i18n&lt;/h2&gt;

&lt;p&gt;How to internationalize &lt;a href=&#34;https://www.meteor.com/&#34;&gt;Meteor&lt;/a&gt; application?
An &lt;a href=&#34;https://atmospherejs.com&#34;&gt;atmosphere&lt;/a&gt; package &lt;a href=&#34;https://atmospherejs.com/universe/i18n&#34;&gt;universe:i18n&lt;/a&gt; helps it.
It supports locales in &lt;a href=&#34;https://github.com/vazco/meteor-universe-i18n/blob/master/lib/locales.js&#34;&gt;the list&lt;/a&gt;,
and JSON and YAML formats for bilingual corpuses.&lt;/p&gt;

&lt;p&gt;To install &lt;a href=&#34;https://atmospherejs.com/universe/i18n&#34;&gt;universe:i18n&lt;/a&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ meteor add universe:i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the following in script files to import it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import i18n from &amp;quot;meteor/universe:i18n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;register-corpuses&#34;&gt;Register corpuses&lt;/h3&gt;

&lt;p&gt;You can add corpuses with APIs in &lt;a href=&#34;https://atmospherejs.com/universe/i18n&#34;&gt;universe:i18n&lt;/a&gt;.
The following line adds a word associated with a namespace and a keyword to a locale.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;i18n.addTranslation(“locale&amp;quot;, “namespace&amp;quot;, “keyword&amp;quot;, “word&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;corpus-file&#34;&gt;Corpus file&lt;/h3&gt;

&lt;p&gt;It is hard to add corpuses by &lt;code&gt;i18n.addTranslation&lt;/code&gt; function.
You can add corpuses with JSON and YAML files,
and such file names must end with &lt;code&gt;.i18n.json&lt;/code&gt; and &lt;code&gt;.i18n.yml&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;For example, a YAML corpus file consists of key-value pairs such as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;ok: 決定
cancel: キャンセル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify namespace of a corpus file with adding &lt;code&gt;_namespace&lt;/code&gt; key.
The following example is a set of corpuses for namespace &lt;code&gt;ui&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;_namespace: ui
ok: 決定
cancel: キャンセル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which locale a corpus file belongs to is specified by &lt;code&gt;_locale&lt;/code&gt; key or file name.
The following file belongs to locale &lt;code&gt;ja&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;_locale: ja
ok: 決定
cancel: キャンセル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to open each corpus files to check locale if using &lt;code&gt;_locale&lt;/code&gt; key.
I think it is better to use file name to specify locale.
For example, a corpus file which belongs to &lt;code&gt;en-US&lt;/code&gt; locale should be following
one of the two formats.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;en-us.i18n.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;en-us/someName.i18n.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that corpus files must not be in &lt;code&gt;imports&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;get-a-translated-word&#34;&gt;Get a translated word&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18n.__(namespace, key)&lt;/code&gt; function returns a translated word associated with &lt;code&gt;namespace&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;i18n.__(&amp;quot;ui&amp;quot;, &amp;quot;ok&amp;quot;); // -&amp;gt; 決定 (in locale ja)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;change-locale&#34;&gt;Change locale&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;i18n.setLocale(&amp;quot;locale&amp;quot;)&lt;/code&gt; function sets a new locale &lt;code&gt;locale&lt;/code&gt;,
and downloads the corpus associated with the locale asynchronously.
The function returns a &lt;code&gt;Promise&lt;/code&gt; and &lt;code&gt;.then&lt;/code&gt; method is available to run some commands after receiving the corpus.&lt;/p&gt;

&lt;h3 id=&#34;use-universe-i18n-in-angular-meteor&#34;&gt;Use universe:i18n in Angular-Meteor&lt;/h3&gt;

&lt;p&gt;To use universe:i18n in &lt;a href=&#34;http://www.angular-meteor.com/&#34;&gt;Angular-Meteor&lt;/a&gt; template,
add &lt;code&gt;i18n.getTranslation&lt;/code&gt; method in a scope.
Foe example, the following controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class AppCtrl {

  constructor() {
    this.translator = i18n.getTranslation;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;provides &lt;code&gt;translator&lt;/code&gt; method and a template&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;md-button ng-click=&amp;quot;$ctrl.onNext()&amp;quot; aria-label=&amp;quot;$ctrl.translator(&#39;ui&#39;, &#39;ok&#39;)&amp;quot;&amp;gt;
  {{$ctrl.translator(&amp;quot;button&amp;quot;, &amp;quot;start&amp;quot;)}}
&amp;lt;/md-button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;inserts a word associated with &lt;code&gt;button&lt;/code&gt; namespace and &lt;code&gt;start&lt;/code&gt; key.
To update such words when locale is changed, use the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const setLocalePromise = i18n.setLocale(locale) || i18n.setLocale(&amp;quot;en&amp;quot;);
setLocalePromise.then((e) =&amp;gt; {
   this.translator = i18n.getTranslation;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you call &lt;code&gt;setLocale&lt;/code&gt; function without an UI event, for example in a constructor, DOM won&amp;rsquo;t be updated.
You need to use &lt;code&gt;$scope.$apply()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;constructor($scope) {

  const setLocalePromise = i18n.setLocale(getLang()) || i18n.setLocale(&amp;quot;en&amp;quot;);
  setLocalePromise.then(() =&amp;gt; {
    $scope.$apply( () =&amp;gt;{
      this.translator = i18n.getTranslation;
    });
  });

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;http://jimhoskins.com/2012/12/17/angularjs-and-apply.html&#34;&gt;AngularJS and scope.$apply&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use fullPage.js in AngularJS</title>
      <link>https://www.jkawamoto.info/blogs/fullpagejs-in-angularjs/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/fullpagejs-in-angularjs/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hellsan631/angular-fullpage.js&#34;&gt;angular-fullpage.js&lt;/a&gt; is a library
to use &lt;a href=&#34;http://alvarotrigo.com/fullPage/&#34;&gt;fullPage.js&lt;/a&gt; in &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;,
but the &lt;a href=&#34;https://www.npmjs.com/package/angular-fullpage.js&#34;&gt;npm&lt;/a&gt; version has a problem in event handling,
and you need to use GitHub version.&lt;/p&gt;

&lt;p&gt;Although fullPage.js also assumes every section is a child of a same parent node, it is difficult in AngularJS.
I &lt;a href=&#34;https://github.com/jkawamoto/fullPage.js&#34;&gt;modified fullPage.js&lt;/a&gt; to solve this problem.&lt;/p&gt;

&lt;p&gt;This entry explains how to use my fullPage.js in AngularJS.&lt;/p&gt;

&lt;h2 id=&#34;angular-fullpage-js&#34;&gt;angular-fullpage.js&lt;/h2&gt;

&lt;p&gt;The current version of angular-fullpage.js in npm has a problem in event handling,
and you need to use the newest source code from GitHub.
&lt;code&gt;dependencies&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; allows GitHub repositores, i.e.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;angular-fullpage.js&amp;quot;: &amp;quot;hellsan631/angular-fullpage.js&amp;quot;,
    ...
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;npm install&lt;/code&gt; downloads the newest source code from GitHub.&lt;/p&gt;

&lt;p&gt;To activate fullPage.js, you need to add &lt;code&gt;full-page&lt;/code&gt; attribute to the parent node&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 2&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 3&amp;lt;/div&amp;gt;
  …
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and give options through &lt;code&gt;options&lt;/code&gt; attribute.
For example, make a controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class FullpageCtrl {

  constructor() {

    this.options = {
      sectionsColor: [&#39;#1bbc9b&#39;, &#39;#4BBFC3&#39;, &#39;#7BAABE&#39;],
      scrollingSpeed: 1000,
      onLeave: (index, nextIndex, direction) =&amp;gt; {
        // do something
      }
    };

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and use it from a template&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page options=&amp;quot;$ctrl.options&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 2&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 3&amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apply-fullpage-js-for-not-sibling-nodes&#34;&gt;Apply fullPage.js for not sibling nodes&lt;/h2&gt;

&lt;p&gt;fullpage.js assumes every section is a child of a same parent node, for example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 2&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Section 3&amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This constraint might be a problem when you combine components providing sections.
Suppose two components &lt;code&gt;component1&lt;/code&gt; and &lt;code&gt;component2&lt;/code&gt;, and those templates are&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;section&amp;quot; ng-repeat=&amp;quot;item in $ctrl.items&amp;quot;&amp;gt;
  &amp;lt;!-- some contents --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;section&amp;quot; ng-repeat=&amp;quot;item in $ctrl.items&amp;quot;&amp;gt;
  &amp;lt;!-- some contents --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, a parent node of fullpage.js is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;component1&amp;gt;&amp;lt;/component1&amp;gt;
  &amp;lt;component2&amp;gt;&amp;lt;/component2&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This template is extended to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div full-page&amp;gt;
  &amp;lt;component1&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
     &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
     &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    ...
  &amp;lt;/component1&amp;gt;
  &amp;lt;component2&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
      &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
      &amp;lt;!-- some contents --&amp;gt;
    &amp;lt;/div&amp;gt;
    ...
  &amp;lt;/component2&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and those sections are not children of a same parent node,
which means fullPage.js doesn&amp;rsquo;t work in such case.&lt;/p&gt;

&lt;p&gt;I fixed this problem and my source code is available in &lt;a href=&#34;https://github.com/jkawamoto/fullPage.js&#34;&gt;GitHub&lt;/a&gt;.
To use my version, your &lt;code&gt;package.json&lt;/code&gt; should have a link to my repository like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;fullpage.js&amp;quot;: &amp;quot;jkawamoto/fullPage.js#deeper-section-spike&amp;quot;,
    ...
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version searches all nodes to find sections and it might be slower than original version.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Chart.js in AngularJS</title>
      <link>https://www.jkawamoto.info/blogs/chartjs-in-angularjs/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/chartjs-in-angularjs/</guid>
      <description>

&lt;h2 id=&#34;angular-chart&#34;&gt;Angular Chart&lt;/h2&gt;

&lt;p&gt;This entry explains how to use &lt;a href=&#34;http://www.chartjs.org/&#34;&gt;Chart.js&lt;/a&gt; in &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;.
The answer is simple and use &lt;a href=&#34;http://jtblin.github.io/angular-chart.js/&#34;&gt;Angular Chart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To add a chart in your application, you need to add a &lt;code&gt;canvas&lt;/code&gt; element with &lt;code&gt;chart&lt;/code&gt; class and a class depended on chart type you want to add.
Suppose we are adding a bar chart in an application, for example, we need to add a &lt;code&gt;canvas&lt;/code&gt; element with &lt;code&gt;class=&amp;quot;chart chart-bar&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Angular Chart, data to be plotted are given through &lt;code&gt;chart-data&lt;/code&gt;, &lt;code&gt;chart-labels&lt;/code&gt;, &lt;code&gt;chart-series&lt;/code&gt;, and &lt;code&gt;chart-dataset-override&lt;/code&gt; elements.
This design is little bit different from one of original &lt;a href=&#34;http://www.chartjs.org/&#34;&gt;Chart.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chart-data&lt;/code&gt; attribute is associated with &lt;code&gt;data.datasets&lt;/code&gt; in &lt;code&gt;Chart.js&lt;/code&gt;, but it only takes a list or 2-dimensions list,
although &lt;code&gt;data.datasets&lt;/code&gt; takes a more complex object, including labels, color information, etc.
Here is an example object in &lt;code&gt;Chart.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;datasets: [{
  label: &#39;# of Votes&#39;,
  data: [12, 19, 3, 5, 2, 3],
  backgroundColor: [
    &#39;rgba(255, 99, 132, 0.2)&#39;,
    &#39;rgba(54, 162, 235, 0.2)&#39;,
    &#39;rgba(255, 206, 86, 0.2)&#39;,
    &#39;rgba(75, 192, 192, 0.2)&#39;,
    &#39;rgba(153, 102, 255, 0.2)&#39;,
    &#39;rgba(255, 159, 64, 0.2)&#39;
  ],
  borderColor: [
    &#39;rgba(255,99,132,1)&#39;,
    &#39;rgba(54, 162, 235, 1)&#39;,
    &#39;rgba(255, 206, 86, 1)&#39;,
    &#39;rgba(75, 192, 192, 1)&#39;,
    &#39;rgba(153, 102, 255, 1)&#39;,
    &#39;rgba(255, 159, 64, 1)&#39;
  ],
  borderWidth: 1
},
...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Angular Chart, the data given to &lt;code&gt;chart-data&lt;/code&gt; attribute must consist of only data attribute in the above object,
i.e. the constructor of our controller is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class GraphCtrl{
  constructor() {
    this.data = [
      [12, 19, 3, 5, 2, 3],
      ...
    ];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and our template is &lt;code&gt;&amp;lt;canvas class=&amp;quot;chart chart-bar&amp;quot; chart-data=&amp;quot;$ctrl.data&amp;quot; /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Label information is given through &lt;code&gt;chart-series&lt;/code&gt; attribute,
and the attribute takes a list consists of label names.&lt;/p&gt;

&lt;p&gt;The other information such as &lt;code&gt;backgroundColor&lt;/code&gt;, &lt;code&gt;borderColor&lt;/code&gt;, &lt;code&gt;borderWidth&lt;/code&gt;, etc. is given through &lt;code&gt;chart-dataset-override&lt;/code&gt; attribute.
This attribute takes as same object as one in &lt;code&gt;Chart.js&lt;/code&gt; without &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;Note that, &lt;code&gt;chart-data&lt;/code&gt; attribute is required and you shouldn&amp;rsquo;t give data through &lt;code&gt;chart-dataset-override&lt;/code&gt; attaribute.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;In this example, we&amp;rsquo;ll convert &lt;a href=&#34;(http://www.chartjs.org/docs/#getting-started-creating-a-chart)&#34;&gt;a bar chart example&lt;/a&gt; given
in Chart.js&amp;rsquo;s document for Angular Chart.&lt;/p&gt;

&lt;h4 id=&#34;chart-js-version&#34;&gt;Chart.js version&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var myChart = new Chart(ctx, {
  type: &#39;bar&#39;,
  data: {
    labels: [&amp;quot;Red&amp;quot;, &amp;quot;Blue&amp;quot;, &amp;quot;Yellow&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Purple&amp;quot;, &amp;quot;Orange&amp;quot;],
    datasets: [{
      label: &#39;# of Votes&#39;,
      data: [12, 19, 3, 5, 2, 3],
      backgroundColor: [
        &#39;rgba(255, 99, 132, 0.2)&#39;,
        &#39;rgba(54, 162, 235, 0.2)&#39;,
        &#39;rgba(255, 206, 86, 0.2)&#39;,
        &#39;rgba(75, 192, 192, 0.2)&#39;,
        &#39;rgba(153, 102, 255, 0.2)&#39;,
        &#39;rgba(255, 159, 64, 0.2)&#39;
      ],
      borderColor: [
        &#39;rgba(255,99,132,1)&#39;,
        &#39;rgba(54, 162, 235, 1)&#39;,
        &#39;rgba(255, 206, 86, 1)&#39;,
        &#39;rgba(75, 192, 192, 1)&#39;,
        &#39;rgba(153, 102, 255, 1)&#39;,
        &#39;rgba(255, 159, 64, 1)&#39;
      ],
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      yAxes: [{
        ticks: {
          beginAtZero: true
        }
      }]
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;angular-chart-version&#34;&gt;Angular Chart version&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;chart.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class ChartCtrl{

  constructor(){

    this.labels = [&amp;quot;Red&amp;quot;, &amp;quot;Blue&amp;quot;, &amp;quot;Yellow&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Purple&amp;quot;, &amp;quot;Orange&amp;quot;];
    this.data = [
      [12, 19, 3, 5, 2, 3]
    ];
    this.seriese = [&amp;quot;# of Votes&amp;quot;];
    this.datasets = [
      {
        backgroundColor: [
          &#39;rgba(255, 99, 132, 0.2)&#39;,
          &#39;rgba(54, 162, 235, 0.2)&#39;,
          &#39;rgba(255, 206, 86, 0.2)&#39;,
          &#39;rgba(75, 192, 192, 0.2)&#39;,
          &#39;rgba(153, 102, 255, 0.2)&#39;,
          &#39;rgba(255, 159, 64, 0.2)&#39;
        ],
        borderColor: [
          &#39;rgba(255,99,132,1)&#39;,
          &#39;rgba(54, 162, 235, 1)&#39;,
          &#39;rgba(255, 206, 86, 1)&#39;,
          &#39;rgba(75, 192, 192, 1)&#39;,
          &#39;rgba(153, 102, 255, 1)&#39;,
          &#39;rgba(255, 159, 64, 1)&#39;
        ],
        borderWidth: 1
      }
    ];
    this.options = {
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero: true
          }
        }]
      }
    };

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;chart.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;canvas class=&amp;quot;chart chart-bar&amp;quot;
  chart-data=&amp;quot;$ctrl.data&amp;quot;
  chart-labels=&amp;quot;$ctrl.labels&amp;quot;
  chart-series=&amp;quot;$ctrl.seriese&amp;quot;
  chart-dataset-override=&amp;quot;$ctrl.datasets&amp;quot;
  chart-options=&amp;quot;$ctrl.options&amp;quot;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;datasets&lt;/code&gt; has only one sequence as the above example, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;datasets&lt;/code&gt; shouldn&amp;rsquo;t be lists.
But, in this case, &lt;code&gt;chart-series&lt;/code&gt; attribute will be ignored,
and don&amp;rsquo;t forget to add &lt;code&gt;label: &amp;quot;# of Votes&amp;quot;&lt;/code&gt; attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;this.data = [12, 19, 3, 5, 2, 3];
this.datasets = {
  label: &amp;quot;# of Votes&amp;quot;,
  backgroundColor: [
    &#39;rgba(255, 99, 132, 0.2)&#39;,
    &#39;rgba(54, 162, 235, 0.2)&#39;,
    &#39;rgba(255, 206, 86, 0.2)&#39;,
    &#39;rgba(75, 192, 192, 0.2)&#39;,
    &#39;rgba(153, 102, 255, 0.2)&#39;,
    &#39;rgba(255, 159, 64, 0.2)&#39;
  ],
  borderColor: [
    &#39;rgba(255,99,132,1)&#39;,
    &#39;rgba(54, 162, 235, 1)&#39;,
    &#39;rgba(255, 206, 86, 1)&#39;,
    &#39;rgba(75, 192, 192, 1)&#39;,
    &#39;rgba(153, 102, 255, 1)&#39;,
    &#39;rgba(255, 159, 64, 1)&#39;
  ],
  borderWidth: 1
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install numba to mac</title>
      <link>https://www.jkawamoto.info/blogs/install-numba-to-mac/</link>
      <pubDate>Fri, 29 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blogs/install-numba-to-mac/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://numba.pydata.org/&#34;&gt;numba&lt;/a&gt; provides an easy optimization for python codes
but &lt;code&gt;pip&lt;/code&gt; doesn&amp;rsquo;t work to install numba.
This entry explains installation and import way of numba.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;numba requires &lt;a href=&#34;http://llvm.org/&#34;&gt;&lt;code&gt;llvm&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;enum34&lt;/code&gt;,
and the required version of llvm isn&amp;rsquo;t the newest version 3.8.x but version 3.7.x.
To install such version, you need to tap &lt;code&gt;homebrew/versions&lt;/code&gt; and set environ variable &lt;code&gt;LLVM_CONFIG&lt;/code&gt;.
The following steps do that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew tap homebrew/versions
$ brew install homebrew/versions/llvm37
$ export LLVM_CONFIG=/usr/local/Cellar/llvm37/3.7.1/bin/llvm-config-3.7

$ pip install enum34
$ pip install numba
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;import-numba&#34;&gt;Import numba&lt;/h2&gt;

&lt;p&gt;We should prepare import even if our source code will run without numba,
and we replace no-op decorate if numba cannot be imported.
The following source code do that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:
    from numba import jit
except ImportError:
    def jit(*args, **_kwargs):
        if len(args) &amp;gt; 0 and hasattr(args[0], &amp;quot;__call__&amp;quot;):
            return args[0]
        else:
            def _(func):
                return func
            return _
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your code has other decorators than &lt;code&gt;@jit&lt;/code&gt;, you need to define those decorators,
and in this case, you need to give types as texts not objects.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/teoliphant/numba-siam-2013&#34;&gt;http://www.slideshare.net/teoliphant/numba-siam-2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2833162&#34;&gt;http://dl.acm.org/citation.cfm?id=2833162&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>データ解析のための統計モデリング入門 第10章 を PyMC で解く</title>
      <link>https://www.jkawamoto.info/blog-ja/pymc-lesson-10/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blog-ja/pymc-lesson-10/</guid>
      <description>

&lt;script src=&#34;https://gist.github.com/jkawamoto/4a136615118fffe2930c54773389d079.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;参考書籍&#34;&gt;参考書籍&lt;/h2&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=FFFFFF&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=jkwf4mew-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=400006973X&amp;linkId=e5d3611547b0a6ff789dc2ce355b7a15&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>レビューサイトにおける不均質性を考慮した特異なレビュアー発見とレビューサマリの推測</title>
      <link>https://www.jkawamoto.info/slides/deim2016/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/slides/deim2016/</guid>
      <description>&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/ifpVDK856yUGec&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; 
</description>
    </item>
    
    <item>
      <title>LaTeX スニペット集</title>
      <link>https://www.jkawamoto.info/blog-ja/latex-snippets/</link>
      <pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blog-ja/latex-snippets/</guid>
      <description>&lt;script src=&#34;https://gist.github.com/jkawamoto/e9f73ffab91a7fda62b3.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>高度プログラミングサンプルコード</title>
      <link>https://www.jkawamoto.info/blog-ja/programming-sample-codes/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.jkawamoto.info/blog-ja/programming-sample-codes/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;九州大学基幹教育科目「高度プログラミング」総合課題３のサンプルコードです．
課題の内容や配布資料を参照してください．&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/jkawamoto/7aca96b3ac8f96a3d769.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>